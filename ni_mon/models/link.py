# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ni_mon.models.base_model_ import Model
from ni_mon import util


class Link(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, node1_id: str=None, node2_id: str=None, delay_us: int=None, max_bw_mbps: int=None):  # noqa: E501
        """Link - a model defined in Swagger

        :param id: The id of this Link.  # noqa: E501
        :type id: str
        :param node1_id: The node1_id of this Link.  # noqa: E501
        :type node1_id: str
        :param node2_id: The node2_id of this Link.  # noqa: E501
        :type node2_id: str
        :param delay_us: The delay_us of this Link.  # noqa: E501
        :type delay_us: int
        :param max_bw_mbps: The max_bw_mbps of this Link.  # noqa: E501
        :type max_bw_mbps: int
        """
        self.swagger_types = {
            'id': str,
            'node1_id': str,
            'node2_id': str,
            'delay_us': int,
            'max_bw_mbps': int
        }

        self.attribute_map = {
            'id': 'id',
            'node1_id': 'node1_id',
            'node2_id': 'node2_id',
            'delay_us': 'delay_us',
            'max_bw_mbps': 'max_bw_mbps'
        }

        self._id = id
        self._node1_id = node1_id
        self._node2_id = node2_id
        self._delay_us = delay_us
        self._max_bw_mbps = max_bw_mbps

    @classmethod
    def from_dict(cls, dikt) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Link of this Link.  # noqa: E501
        :rtype: Link
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Link.


        :return: The id of this Link.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Link.


        :param id: The id of this Link.
        :type id: str
        """

        self._id = id

    @property
    def node1_id(self) -> str:
        """Gets the node1_id of this Link.


        :return: The node1_id of this Link.
        :rtype: str
        """
        return self._node1_id

    @node1_id.setter
    def node1_id(self, node1_id: str):
        """Sets the node1_id of this Link.


        :param node1_id: The node1_id of this Link.
        :type node1_id: str
        """

        self._node1_id = node1_id

    @property
    def node2_id(self) -> str:
        """Gets the node2_id of this Link.


        :return: The node2_id of this Link.
        :rtype: str
        """
        return self._node2_id

    @node2_id.setter
    def node2_id(self, node2_id: str):
        """Sets the node2_id of this Link.


        :param node2_id: The node2_id of this Link.
        :type node2_id: str
        """

        self._node2_id = node2_id

    @property
    def delay_us(self) -> int:
        """Gets the delay_us of this Link.


        :return: The delay_us of this Link.
        :rtype: int
        """
        return self._delay_us

    @delay_us.setter
    def delay_us(self, delay_us: int):
        """Sets the delay_us of this Link.


        :param delay_us: The delay_us of this Link.
        :type delay_us: int
        """

        self._delay_us = delay_us

    @property
    def max_bw_mbps(self) -> int:
        """Gets the max_bw_mbps of this Link.


        :return: The max_bw_mbps of this Link.
        :rtype: int
        """
        return self._max_bw_mbps

    @max_bw_mbps.setter
    def max_bw_mbps(self, max_bw_mbps: int):
        """Sets the max_bw_mbps of this Link.


        :param max_bw_mbps: The max_bw_mbps of this Link.
        :type max_bw_mbps: int
        """

        self._max_bw_mbps = max_bw_mbps
