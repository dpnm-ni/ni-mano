# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ni_mon.models.base_model_ import Model
from ni_mon import util


class VNFFlavor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, capacity_mbps: int=None, delay_us: int=None, n_cores: int=None, ram_mb: int=None):  # noqa: E501
        """VNFFlavor - a model defined in Swagger

        :param id: The id of this VNFFlavor.  # noqa: E501
        :type id: str
        :param name: The name of this VNFFlavor.  # noqa: E501
        :type name: str
        :param capacity_mbps: The capacity_mbps of this VNFFlavor.  # noqa: E501
        :type capacity_mbps: int
        :param delay_us: The delay_us of this VNFFlavor.  # noqa: E501
        :type delay_us: int
        :param n_cores: The n_cores of this VNFFlavor.  # noqa: E501
        :type n_cores: int
        :param ram_mb: The ram_mb of this VNFFlavor.  # noqa: E501
        :type ram_mb: int
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'capacity_mbps': int,
            'delay_us': int,
            'n_cores': int,
            'ram_mb': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'capacity_mbps': 'capacity_mbps',
            'delay_us': 'delay_us',
            'n_cores': 'n_cores',
            'ram_mb': 'ram_mb'
        }

        self._id = id
        self._name = name
        self._capacity_mbps = capacity_mbps
        self._delay_us = delay_us
        self._n_cores = n_cores
        self._ram_mb = ram_mb

    @classmethod
    def from_dict(cls, dikt) -> 'VNFFlavor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VNFFlavor of this VNFFlavor.  # noqa: E501
        :rtype: VNFFlavor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this VNFFlavor.


        :return: The id of this VNFFlavor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this VNFFlavor.


        :param id: The id of this VNFFlavor.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this VNFFlavor.


        :return: The name of this VNFFlavor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this VNFFlavor.


        :param name: The name of this VNFFlavor.
        :type name: str
        """

        self._name = name

    @property
    def capacity_mbps(self) -> int:
        """Gets the capacity_mbps of this VNFFlavor.


        :return: The capacity_mbps of this VNFFlavor.
        :rtype: int
        """
        return self._capacity_mbps

    @capacity_mbps.setter
    def capacity_mbps(self, capacity_mbps: int):
        """Sets the capacity_mbps of this VNFFlavor.


        :param capacity_mbps: The capacity_mbps of this VNFFlavor.
        :type capacity_mbps: int
        """

        self._capacity_mbps = capacity_mbps

    @property
    def delay_us(self) -> int:
        """Gets the delay_us of this VNFFlavor.


        :return: The delay_us of this VNFFlavor.
        :rtype: int
        """
        return self._delay_us

    @delay_us.setter
    def delay_us(self, delay_us: int):
        """Sets the delay_us of this VNFFlavor.


        :param delay_us: The delay_us of this VNFFlavor.
        :type delay_us: int
        """

        self._delay_us = delay_us

    @property
    def n_cores(self) -> int:
        """Gets the n_cores of this VNFFlavor.


        :return: The n_cores of this VNFFlavor.
        :rtype: int
        """
        return self._n_cores

    @n_cores.setter
    def n_cores(self, n_cores: int):
        """Sets the n_cores of this VNFFlavor.


        :param n_cores: The n_cores of this VNFFlavor.
        :type n_cores: int
        """

        self._n_cores = n_cores

    @property
    def ram_mb(self) -> int:
        """Gets the ram_mb of this VNFFlavor.


        :return: The ram_mb of this VNFFlavor.
        :rtype: int
        """
        return self._ram_mb

    @ram_mb.setter
    def ram_mb(self, ram_mb: int):
        """Sets the ram_mb of this VNFFlavor.


        :param ram_mb: The ram_mb of this VNFFlavor.
        :type ram_mb: int
        """

        self._ram_mb = ram_mb
