---
swagger: "2.0"
info:
  description: "Monitoring module for NI project"
  version: "1.0.0"
  title: "NI-Mon"
  contact:
    email: "vantu.bkhn@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
schemes:
- "http"
paths:
  /topology:
    get:
      summary: "Return a topology with lists of node names and link ids"
      operationId: "get_topology"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Topology"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /nodes:
    get:
      summary: "get a list of nodes"
      operationId: "get_nodes"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Node"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /nodes/{id}:
    get:
      summary: "get information of a node"
      operationId: "get_node"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the node"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Node"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /links:
    get:
      summary: "get list of link"
      operationId: "get_links"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Link"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /link/{id}:
    get:
      summary: "get a link"
      operationId: "get_link"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the link"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Link"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /link_between_nodes:
    get:
      summary: "get detailed information of a link between two specific nodes"
      operationId: "get_link_between_nodes"
      produces:
      - "application/json"
      parameters:
      - name: "node1_id"
        in: "query"
        description: "The id of the first node in the link"
        required: true
        type: "string"
      - name: "node2_id"
        in: "query"
        description: "The id of the second node in the link"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Link"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /vnfflavors:
    get:
      summary: "get a list of vnfflavors"
      operationId: "get_vnf_flavors"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VNFFlavor"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /vnfflavors/{id}:
    get:
      summary: "get detailed information of a vnfflavor. Only available to VM (container\
        \ do not have flavor)"
      operationId: "get_vnf_flavor"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the vnfflavor"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VNFFlavor"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /vnfinstances:
    get:
      summary: "get a list of vnf instances"
      operationId: "get_vnf_instances"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VNFInstance"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /vnfinstances/{id}:
    get:
      summary: "get detailed information of a vnf instance"
      operationId: "get_vnf_instance"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the vnf instance"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VNFInstance"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /measurements/{id}/{measurement_type}:
    get:
      summary: "Return the value of a measurement of a vnf instance or compute node\
        \ at a timestamp or a timestamp period"
      operationId: "get_measurement"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the vnf instance or compute node"
        required: true
        type: "string"
      - name: "measurement_type"
        in: "path"
        description: "The measurement metric, which can be get using getMeasurementTypes()"
        required: true
        type: "string"
      - name: "start_time"
        in: "query"
        description: "starting time to get the measurement"
        required: true
        type: "string"
        format: "date-time"
      - name: "end_time"
        in: "query"
        description: "ending time to get the measurement"
        required: true
        type: "string"
        format: "date-time"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MonitoringEntry"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /last_measurement/{id}/{measurement_type}:
    get:
      summary: "Return the latest value of a measurement of a vnf instance or compute\
        \ node"
      operationId: "get_last_measurement"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the vnf instance or compute node"
        required: true
        type: "string"
      - name: "measurement_type"
        in: "path"
        description: "The measurement metric, which can be get using getMeasurementTypes()"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/MonitoringEntry"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
  /measurement_types/{id}:
    get:
      summary: "get a list of measurements of a vnf instance or a compute node"
      operationId: "get_measurement_types"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the vnf instance or compute node"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              type: "string"
      x-swagger-router-controller: "ni_mon.controllers.default_controller"
definitions:
  Topology:
    type: "object"
    properties:
      nodes:
        type: "array"
        description: "List of node ids"
        items:
          type: "string"
      links:
        type: "array"
        description: "List of link ids"
        items:
          type: "string"
    example:
      nodes:
      - "nodes"
      - "nodes"
      links:
      - "links"
      - "links"
  VNFFlavor:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      capacity_mbps:
        type: "integer"
        format: "int32"
      delay_us:
        type: "integer"
        format: "int32"
      n_cores:
        type: "integer"
        format: "int32"
      ram_mb:
        type: "integer"
        format: "int32"
    example:
      n_cores: 1
      ram_mb: 5
      capacity_mbps: 0
      name: "name"
      id: "id"
      delay_us: 6
  Node:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
        description: "the type of node. currently, can be compute or switch"
      status:
        type: "string"
      ip:
        type: "string"
      n_cores:
        type: "integer"
        format: "int32"
      n_cores_free:
        type: "integer"
        format: "int32"
      core_freq_mhz:
        type: "integer"
        format: "int32"
      ram_mb:
        type: "integer"
        format: "int32"
      ram_free_mb:
        type: "integer"
        format: "int32"
      ram_freq_mhz:
        type: "integer"
        format: "int32"
    example:
      n_cores_free: 6
      n_cores: 0
      ram_freq_mhz: 2
      ram_mb: 5
      ram_free_mb: 5
      ip: "ip"
      name: "name"
      id: "id"
      type: "type"
      core_freq_mhz: 1
      status: "status"
  Link:
    type: "object"
    properties:
      id:
        type: "string"
      node1_id:
        type: "string"
      node2_id:
        type: "string"
      delay_us:
        type: "integer"
        format: "int32"
      max_bw_mbps:
        type: "integer"
        format: "int32"
    example:
      id: "id"
      node1_id: "node1_id"
      node2_id: "node2_id"
      delay_us: 0
      max_bw_mbps: 6
  MonitoringEntry:
    type: "object"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      component_type:
        type: "string"
        description: "unused for now"
      component_id:
        type: "string"
        description: "the id of the VNF instance or compute node"
      measurement_type:
        type: "string"
      measurement_value:
        type: "number"
        format: "double"
    example:
      component_type: "component_type"
      measurement_value: 0.8008281904610115
      component_id: "component_id"
      measurement_type: "measurement_type"
      timestamp: "2000-01-23T04:56:07.000+00:00"
  NetworkPort:
    type: "object"
    properties:
      port_id:
        type: "string"
      port_name:
        type: "string"
      network_id:
        type: "string"
      ip_addresses:
        type: "array"
        items:
          type: "string"
    example:
      port_name: "port_name"
      network_id: "network_id"
      ip_addresses:
      - "ip_addresses"
      - "ip_addresses"
      port_id: "port_id"
  VNFInstance:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      is_container:
        type: "boolean"
        description: "whether the vnf is a container or a virtual machine"
      status:
        type: "string"
        description: "state of VNF . (ACTIVE, SHUTOFF, ERROR, Running, etc.). The\
          \ string can be different between VM and container"
      flavor_id:
        type: "string"
        description: "the flavor id of the vnf"
      image_id:
        type: "string"
        description: "i the dockerhub image (if container) or glance image (if VM)\
          \ used for the vnf"
      node_id:
        type: "string"
      ports:
        type: "array"
        items:
          $ref: "#/definitions/NetworkPort"
    example:
      flavor_id: "flavor_id"
      is_container: true
      name: "name"
      id: "id"
      image_id: "image_id"
      ports:
      - port_name: "port_name"
        network_id: "network_id"
        ip_addresses:
        - "ip_addresses"
        - "ip_addresses"
        port_id: "port_id"
      - port_name: "port_name"
        network_id: "network_id"
        ip_addresses:
        - "ip_addresses"
        - "ip_addresses"
        port_id: "port_id"
      status: "status"
      node_id: "node_id"
externalDocs:
  description: "Find out more about DPNM NI."
  url: "http://dpnm.postech.ac.kr/"
