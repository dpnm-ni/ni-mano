# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ni_nfvo.models.base_model_ import Model
from ni_nfvo import util


class Sfc(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, sfc_name: str=None, sfcr_ids: List[str]=None, vnf_instance_ids: List[List[str]]=None, is_symmetric: bool=None):  # noqa: E501
        """Sfc - a model defined in Swagger

        :param id: The id of this Sfc.  # noqa: E501
        :type id: str
        :param sfc_name: The sfc_name of this Sfc.  # noqa: E501
        :type sfc_name: str
        :param sfcr_ids: The sfcr_ids of this Sfc.  # noqa: E501
        :type sfcr_ids: List[str]
        :param vnf_instance_ids: The vnf_instance_ids of this Sfc.  # noqa: E501
        :type vnf_instance_ids: List[List[str]]
        :param is_symmetric: The is_symmetric of this Sfc.  # noqa: E501
        :type is_symmetric: bool
        """
        self.swagger_types = {
            'id': str,
            'sfc_name': str,
            'sfcr_ids': List[str],
            'vnf_instance_ids': List[List[str]],
            'is_symmetric': bool
        }

        self.attribute_map = {
            'id': 'id',
            'sfc_name': 'sfc_name',
            'sfcr_ids': 'sfcr_ids',
            'vnf_instance_ids': 'vnf_instance_ids',
            'is_symmetric': 'is_symmetric'
        }

        self._id = id
        self._sfc_name = sfc_name
        self._sfcr_ids = sfcr_ids
        self._vnf_instance_ids = vnf_instance_ids
        self._is_symmetric = is_symmetric

    @classmethod
    def from_dict(cls, dikt) -> 'Sfc':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Sfc of this Sfc.  # noqa: E501
        :rtype: Sfc
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Sfc.


        :return: The id of this Sfc.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Sfc.


        :param id: The id of this Sfc.
        :type id: str
        """

        self._id = id

    @property
    def sfc_name(self) -> str:
        """Gets the sfc_name of this Sfc.


        :return: The sfc_name of this Sfc.
        :rtype: str
        """
        return self._sfc_name

    @sfc_name.setter
    def sfc_name(self, sfc_name: str):
        """Sets the sfc_name of this Sfc.


        :param sfc_name: The sfc_name of this Sfc.
        :type sfc_name: str
        """

        self._sfc_name = sfc_name

    @property
    def sfcr_ids(self) -> List[str]:
        """Gets the sfcr_ids of this Sfc.


        :return: The sfcr_ids of this Sfc.
        :rtype: List[str]
        """
        return self._sfcr_ids

    @sfcr_ids.setter
    def sfcr_ids(self, sfcr_ids: List[str]):
        """Sets the sfcr_ids of this Sfc.


        :param sfcr_ids: The sfcr_ids of this Sfc.
        :type sfcr_ids: List[str]
        """

        self._sfcr_ids = sfcr_ids

    @property
    def vnf_instance_ids(self) -> List[List[str]]:
        """Gets the vnf_instance_ids of this Sfc.

        list of list of vnf id(s). Each sub-list is a node in traffic path, where traffic are load-balanced between Vnfs in the node. Each E.g.: [[A,B], [C], [D]] : traffic go to [A, B] node (load-balanced between A and B), then go to C, then go to D.  # noqa: E501

        :return: The vnf_instance_ids of this Sfc.
        :rtype: List[List[str]]
        """
        return self._vnf_instance_ids

    @vnf_instance_ids.setter
    def vnf_instance_ids(self, vnf_instance_ids: List[List[str]]):
        """Sets the vnf_instance_ids of this Sfc.

        list of list of vnf id(s). Each sub-list is a node in traffic path, where traffic are load-balanced between Vnfs in the node. Each E.g.: [[A,B], [C], [D]] : traffic go to [A, B] node (load-balanced between A and B), then go to C, then go to D.  # noqa: E501

        :param vnf_instance_ids: The vnf_instance_ids of this Sfc.
        :type vnf_instance_ids: List[List[str]]
        """

        self._vnf_instance_ids = vnf_instance_ids

    @property
    def is_symmetric(self) -> bool:
        """Gets the is_symmetric of this Sfc.


        :return: The is_symmetric of this Sfc.
        :rtype: bool
        """
        return self._is_symmetric

    @is_symmetric.setter
    def is_symmetric(self, is_symmetric: bool):
        """Sets the is_symmetric of this Sfc.


        :param is_symmetric: The is_symmetric of this Sfc.
        :type is_symmetric: bool
        """

        self._is_symmetric = is_symmetric
