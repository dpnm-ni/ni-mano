# coding: utf-8

"""
    NI-NFVO

    NFVO module service for the NI project.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: vantu.bkhn@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RouteSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sfc_name': 'str',
        'sfcr_ids': 'list[str]',
        'vnf_instance_ids': 'list[list[str]]',
        'is_symmetric': 'bool'
    }

    attribute_map = {
        'sfc_name': 'sfc_name',
        'sfcr_ids': 'sfcr_ids',
        'vnf_instance_ids': 'vnf_instance_ids',
        'is_symmetric': 'is_symmetric'
    }

    def __init__(self, sfc_name=None, sfcr_ids=None, vnf_instance_ids=None, is_symmetric=None):  # noqa: E501
        """RouteSpec - a model defined in Swagger"""  # noqa: E501

        self._sfc_name = None
        self._sfcr_ids = None
        self._vnf_instance_ids = None
        self._is_symmetric = None
        self.discriminator = None

        if sfc_name is not None:
            self.sfc_name = sfc_name
        self.sfcr_ids = sfcr_ids
        self.vnf_instance_ids = vnf_instance_ids
        if is_symmetric is not None:
            self.is_symmetric = is_symmetric

    @property
    def sfc_name(self):
        """Gets the sfc_name of this RouteSpec.  # noqa: E501


        :return: The sfc_name of this RouteSpec.  # noqa: E501
        :rtype: str
        """
        return self._sfc_name

    @sfc_name.setter
    def sfc_name(self, sfc_name):
        """Sets the sfc_name of this RouteSpec.


        :param sfc_name: The sfc_name of this RouteSpec.  # noqa: E501
        :type: str
        """

        self._sfc_name = sfc_name

    @property
    def sfcr_ids(self):
        """Gets the sfcr_ids of this RouteSpec.  # noqa: E501


        :return: The sfcr_ids of this RouteSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._sfcr_ids

    @sfcr_ids.setter
    def sfcr_ids(self, sfcr_ids):
        """Sets the sfcr_ids of this RouteSpec.


        :param sfcr_ids: The sfcr_ids of this RouteSpec.  # noqa: E501
        :type: list[str]
        """
        if sfcr_ids is None:
            raise ValueError("Invalid value for `sfcr_ids`, must not be `None`")  # noqa: E501

        self._sfcr_ids = sfcr_ids

    @property
    def vnf_instance_ids(self):
        """Gets the vnf_instance_ids of this RouteSpec.  # noqa: E501

        list of list of vnf id(s). Each sub-list is a node in traffic path, where traffic are load-balanced between VNFs in the node. Each E.g.: [[A,B], [C], [D]] : traffic go to [A, B] node (load-balanced between A and B), then go to C, then go to D.  # noqa: E501

        :return: The vnf_instance_ids of this RouteSpec.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._vnf_instance_ids

    @vnf_instance_ids.setter
    def vnf_instance_ids(self, vnf_instance_ids):
        """Sets the vnf_instance_ids of this RouteSpec.

        list of list of vnf id(s). Each sub-list is a node in traffic path, where traffic are load-balanced between VNFs in the node. Each E.g.: [[A,B], [C], [D]] : traffic go to [A, B] node (load-balanced between A and B), then go to C, then go to D.  # noqa: E501

        :param vnf_instance_ids: The vnf_instance_ids of this RouteSpec.  # noqa: E501
        :type: list[list[str]]
        """
        if vnf_instance_ids is None:
            raise ValueError("Invalid value for `vnf_instance_ids`, must not be `None`")  # noqa: E501

        self._vnf_instance_ids = vnf_instance_ids

    @property
    def is_symmetric(self):
        """Gets the is_symmetric of this RouteSpec.  # noqa: E501


        :return: The is_symmetric of this RouteSpec.  # noqa: E501
        :rtype: bool
        """
        return self._is_symmetric

    @is_symmetric.setter
    def is_symmetric(self, is_symmetric):
        """Sets the is_symmetric of this RouteSpec.


        :param is_symmetric: The is_symmetric of this RouteSpec.  # noqa: E501
        :type: bool
        """

        self._is_symmetric = is_symmetric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
