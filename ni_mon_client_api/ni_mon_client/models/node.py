# coding: utf-8

"""
    NI-Mon

    Monitoring module for NI project  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: vantu.bkhn@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ni_mon_client.configuration import Configuration


class Node(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'status': 'str',
        'ip': 'str',
        'n_cores': 'int',
        'n_cores_free': 'int',
        'core_freq_mhz': 'int',
        'ram_mb': 'int',
        'ram_free_mb': 'int',
        'ram_freq_mhz': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'status': 'status',
        'ip': 'ip',
        'n_cores': 'n_cores',
        'n_cores_free': 'n_cores_free',
        'core_freq_mhz': 'core_freq_mhz',
        'ram_mb': 'ram_mb',
        'ram_free_mb': 'ram_free_mb',
        'ram_freq_mhz': 'ram_freq_mhz'
    }

    def __init__(self, id=None, name=None, type=None, status=None, ip=None, n_cores=None, n_cores_free=None, core_freq_mhz=None, ram_mb=None, ram_free_mb=None, ram_freq_mhz=None, _configuration=None):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._type = None
        self._status = None
        self._ip = None
        self._n_cores = None
        self._n_cores_free = None
        self._core_freq_mhz = None
        self._ram_mb = None
        self._ram_free_mb = None
        self._ram_freq_mhz = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if ip is not None:
            self.ip = ip
        if n_cores is not None:
            self.n_cores = n_cores
        if n_cores_free is not None:
            self.n_cores_free = n_cores_free
        if core_freq_mhz is not None:
            self.core_freq_mhz = core_freq_mhz
        if ram_mb is not None:
            self.ram_mb = ram_mb
        if ram_free_mb is not None:
            self.ram_free_mb = ram_free_mb
        if ram_freq_mhz is not None:
            self.ram_freq_mhz = ram_freq_mhz

    @property
    def id(self):
        """Gets the id of this Node.  # noqa: E501


        :return: The id of this Node.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.


        :param id: The id of this Node.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Node.  # noqa: E501


        :return: The name of this Node.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.


        :param name: The name of this Node.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Node.  # noqa: E501

        the type of node. currently, can be compute or switch  # noqa: E501

        :return: The type of this Node.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Node.

        the type of node. currently, can be compute or switch  # noqa: E501

        :param type: The type of this Node.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Node.  # noqa: E501


        :return: The status of this Node.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Node.


        :param status: The status of this Node.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def ip(self):
        """Gets the ip of this Node.  # noqa: E501


        :return: The ip of this Node.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Node.


        :param ip: The ip of this Node.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def n_cores(self):
        """Gets the n_cores of this Node.  # noqa: E501


        :return: The n_cores of this Node.  # noqa: E501
        :rtype: int
        """
        return self._n_cores

    @n_cores.setter
    def n_cores(self, n_cores):
        """Sets the n_cores of this Node.


        :param n_cores: The n_cores of this Node.  # noqa: E501
        :type: int
        """

        self._n_cores = n_cores

    @property
    def n_cores_free(self):
        """Gets the n_cores_free of this Node.  # noqa: E501


        :return: The n_cores_free of this Node.  # noqa: E501
        :rtype: int
        """
        return self._n_cores_free

    @n_cores_free.setter
    def n_cores_free(self, n_cores_free):
        """Sets the n_cores_free of this Node.


        :param n_cores_free: The n_cores_free of this Node.  # noqa: E501
        :type: int
        """

        self._n_cores_free = n_cores_free

    @property
    def core_freq_mhz(self):
        """Gets the core_freq_mhz of this Node.  # noqa: E501


        :return: The core_freq_mhz of this Node.  # noqa: E501
        :rtype: int
        """
        return self._core_freq_mhz

    @core_freq_mhz.setter
    def core_freq_mhz(self, core_freq_mhz):
        """Sets the core_freq_mhz of this Node.


        :param core_freq_mhz: The core_freq_mhz of this Node.  # noqa: E501
        :type: int
        """

        self._core_freq_mhz = core_freq_mhz

    @property
    def ram_mb(self):
        """Gets the ram_mb of this Node.  # noqa: E501


        :return: The ram_mb of this Node.  # noqa: E501
        :rtype: int
        """
        return self._ram_mb

    @ram_mb.setter
    def ram_mb(self, ram_mb):
        """Sets the ram_mb of this Node.


        :param ram_mb: The ram_mb of this Node.  # noqa: E501
        :type: int
        """

        self._ram_mb = ram_mb

    @property
    def ram_free_mb(self):
        """Gets the ram_free_mb of this Node.  # noqa: E501


        :return: The ram_free_mb of this Node.  # noqa: E501
        :rtype: int
        """
        return self._ram_free_mb

    @ram_free_mb.setter
    def ram_free_mb(self, ram_free_mb):
        """Sets the ram_free_mb of this Node.


        :param ram_free_mb: The ram_free_mb of this Node.  # noqa: E501
        :type: int
        """

        self._ram_free_mb = ram_free_mb

    @property
    def ram_freq_mhz(self):
        """Gets the ram_freq_mhz of this Node.  # noqa: E501


        :return: The ram_freq_mhz of this Node.  # noqa: E501
        :rtype: int
        """
        return self._ram_freq_mhz

    @ram_freq_mhz.setter
    def ram_freq_mhz(self, ram_freq_mhz):
        """Sets the ram_freq_mhz of this Node.


        :param ram_freq_mhz: The ram_freq_mhz of this Node.  # noqa: E501
        :type: int
        """

        self._ram_freq_mhz = ram_freq_mhz

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Node):
            return True

        return self.to_dict() != other.to_dict()
