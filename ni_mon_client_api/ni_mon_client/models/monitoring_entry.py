# coding: utf-8

"""
    NI-Mon

    Monitoring module for NI project  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: vantu.bkhn@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MonitoringEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'component_type': 'str',
        'component_id': 'str',
        'measurement_type': 'str',
        'measurement_value': 'float'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'component_type': 'component_type',
        'component_id': 'component_id',
        'measurement_type': 'measurement_type',
        'measurement_value': 'measurement_value'
    }

    def __init__(self, timestamp=None, component_type=None, component_id=None, measurement_type=None, measurement_value=None):  # noqa: E501
        """MonitoringEntry - a model defined in Swagger"""  # noqa: E501

        self._timestamp = None
        self._component_type = None
        self._component_id = None
        self._measurement_type = None
        self._measurement_value = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if component_type is not None:
            self.component_type = component_type
        if component_id is not None:
            self.component_id = component_id
        if measurement_type is not None:
            self.measurement_type = measurement_type
        if measurement_value is not None:
            self.measurement_value = measurement_value

    @property
    def timestamp(self):
        """Gets the timestamp of this MonitoringEntry.  # noqa: E501


        :return: The timestamp of this MonitoringEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MonitoringEntry.


        :param timestamp: The timestamp of this MonitoringEntry.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def component_type(self):
        """Gets the component_type of this MonitoringEntry.  # noqa: E501


        :return: The component_type of this MonitoringEntry.  # noqa: E501
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this MonitoringEntry.


        :param component_type: The component_type of this MonitoringEntry.  # noqa: E501
        :type: str
        """

        self._component_type = component_type

    @property
    def component_id(self):
        """Gets the component_id of this MonitoringEntry.  # noqa: E501


        :return: The component_id of this MonitoringEntry.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this MonitoringEntry.


        :param component_id: The component_id of this MonitoringEntry.  # noqa: E501
        :type: str
        """

        self._component_id = component_id

    @property
    def measurement_type(self):
        """Gets the measurement_type of this MonitoringEntry.  # noqa: E501


        :return: The measurement_type of this MonitoringEntry.  # noqa: E501
        :rtype: str
        """
        return self._measurement_type

    @measurement_type.setter
    def measurement_type(self, measurement_type):
        """Sets the measurement_type of this MonitoringEntry.


        :param measurement_type: The measurement_type of this MonitoringEntry.  # noqa: E501
        :type: str
        """

        self._measurement_type = measurement_type

    @property
    def measurement_value(self):
        """Gets the measurement_value of this MonitoringEntry.  # noqa: E501


        :return: The measurement_value of this MonitoringEntry.  # noqa: E501
        :rtype: float
        """
        return self._measurement_value

    @measurement_value.setter
    def measurement_value(self, measurement_value):
        """Sets the measurement_value of this MonitoringEntry.


        :param measurement_value: The measurement_value of this MonitoringEntry.  # noqa: E501
        :type: float
        """

        self._measurement_value = measurement_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitoringEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitoringEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
